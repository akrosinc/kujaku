apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'signing'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.realm:realm-gradle-plugin:4.1.1"
    }
}

allprojects {
    repositories {
        maven { url "https://dl.google.com/dl/android/maven2/" }
        //maven { url "http://dl.bintray.com/ona/kujaku" }
        mavenLocal()
    }
}

apply plugin: 'realm-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

version '0.9.0'

project.version = this.version

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

/**
 * Retrieves property `ossrhPassword` stored in the gradle.properties file (in project or gradle user-root folder)
 * @return
 */
def getOSSRHRepositoryPassword() {
    return hasProperty('ossrhPassword') ? ossrhPassword : ""
}

/**
 * Retrieves property `ossrhUsername` stored in the gradle.properties file (in project or gradle user-root folder)
 * @return
 */
def getOSSRHRepositoryUsername() {
    return hasProperty('ossrhUsername') ? ossrhUsername : ""
}

def getGithubPublishUsername() {
    return hasProperty('githubUsername') ? githubUsername: ""
}

def getGithubPackagesAccessToken() {
    return hasProperty('githubAccessToken') ? githubAccessToken: ""
}

def getDate() {
    return new Date().format('yyyy-MM-dd HH:mm:ss')
}

/**
 * Run ./gradlew :library:clean && ./gradlew :library:assembleRelease && ./gradlew :library:publish
 * This publishes to all production artefact repositories
 */
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact("$buildDir/outputs/aar/library-release.aar")
            artifact(sourceJar)
            artifact(javadocJar)
            groupId 'io.ona.kujaku'
            artifactId 'library'
            version this.version

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }

            pom {
                name = 'Kujaku Library'
                description = 'Mapping and check-in library for Android using MapBox SDK'
                url = 'http://github.com/onaio/kujaku'
                packaging = 'aar'
                licenses {
                    license {
                        name = 'BSD 2-Clause "Simplified" License'
                        url = 'https://raw.githubusercontent.com/onaio/kujaku/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'ekigamba'
                        name = 'Ephraim Kigamba'
                    }

                    developer {
                        id = 'onaio'
                        name = 'Onaio'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/onaio/kujaku.git'
                    developerConnection = 'scm:git:ssh://github.com/onaio/kujaku.git'
                    url = 'http://github.com/onaio/kujaku'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your or organisation Github userID and REPOSITORY with the repository name on GitHub
             * e.g. "https://maven.pkg.github.com/opensrp/opensrp-client-reporting"
             */
            url = uri("https://maven.pkg.github.com/onaio/kujaku")
            credentials {
                /** Create github.properties in root project folder file with
                 * gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 * Or set env variable GPR_USER & GPR_API_KEY if not adding a properties file
                 */
                username = getGithubPublishUsername()
                password = getGithubPackagesAccessToken()
            }
        }

        maven {
            name = "MavenCentral"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your or organisation Github userID and REPOSITORY with the repository name on GitHub
             * e.g. "https://maven.pkg.github.com/opensrp/opensrp-client-reporting"
             */

            def repositoryURL
            def timestampMsg = " at " + getDate()
            if (!version.contains("SNAPSHOT")) {
                println 'PROCESSING MAVEN RELEASE BUILD VERSION ' + project.VERSION_NAME + timestampMsg + '...'
                repositoryURL = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                        : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            } else {
                println 'PROCESSING MAVEN REMOTE SNAPSHOT BUILD VERSION ' + project.VERSION_NAME + timestampMsg + '...'
                repositoryURL = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                        : "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            }
            url = uri(repositoryURL)
            credentials {
                /** Create gradle.properties in root project folder file with
                 * ossrhUsername=GITHUB_USER_ID & ossrhPassword=PERSONAL_ACCESS_TOKEN
                 */
                username = getOSSRHRepositoryUsername()
                password = getOSSRHRepositoryPassword()
            }
        }
    }
}

bintray {
    // Get Bintray credential from environment variable
    user = System.getenv('BINTRAY_USER') // Get bintray User
    key = System.getenv('BINTRAY_KEY') // Get bintray Secret Key
    configurations = ['archives']
    pkg {
        repo = 'kujaku'
        name = project.name
        userOrg = 'ona'
        licenses = ['Apache-2.0']
        desc = 'Kujaku library'
        websiteUrl = "https://ona.io"
        publish = true
        vcsUrl = "https://github.com/onaio/kujaku.git"
        version {
            name = this.version
            desc = "Kujaku library version ${this.version}"
            released = new Date()
            vcsTag = this.version
        }
    }
    publications = ['Production']
}

jacoco {
    toolVersion = jacocoVersion
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName this.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties");
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist");
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }
        }

        debug {
            testCoverageEnabled true

            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties");
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist");
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""

            }
        }

    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies { configuration ->
    implementation "com.android.support:support-v4:${supportVersion}"
    implementation ("com.mapbox.mapboxsdk:mapbox-android-sdk:${mapboxSdkVersion}") {
        transitive = true;
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-fragment'
    }

    implementation "com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v7:${mapboxAnnotationPluginVersion}"

    // Comment the line below when creating releases - The line is for development of the library & utils
    //implementation (project(":utils")) {
    // Uncomment the line below when creating releases
    implementation('io.ona.kujaku:utils:0.8.0') {
        transitive = true;
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    implementation "com.android.support:appcompat-v7:${supportVersion}"
    implementation "com.android.support:design:${supportVersion}"
    implementation 'org.simpleframework:simple-xml:2.7.1'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.1'
    implementation 'com.jakewharton.timber:timber:4.7.1'

    customDependencies(this, configuration)
    appPermissionsDependencies(configuration)
    infoWindowDependencies(this, configuration)
    locationDependencies(configuration)
    testDependencies(configuration)
}

private static void testDependencies(configuration) {
    configuration.testImplementation 'junit:junit:4.12'
    configuration.testImplementation 'org.robolectric:robolectric:3.8'
    configuration.testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'

    configuration.testImplementation 'org.mockito:mockito-inline:2.25.0'

    configuration.androidTestImplementation 'org.mockito:mockito-android:2.7.22'
    configuration.androidTestImplementation ('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

private static void infoWindowDependencies(instance, configuration) {
    configuration.implementation "com.android.support:cardview-v7:${instance.supportVersion}"
    configuration.implementation "com.android.support:recyclerview-v7:${instance.supportVersion}"
}

private static void customDependencies(instance, configuration) {
    configuration.implementation 'com.cocoahero.android:geojson:1.0.1@jar'
    configuration.implementation "com.android.volley:volley:${instance.volleyVersion}"
    configuration.implementation 'com.snatik:storage:2.1.0'
}

private static void appPermissionsDependencies(configuration) {
    configuration.implementation 'com.karumi:dexter:5.0.0'
}

private static void locationDependencies(configuration) {
    configuration.implementation 'com.google.android.gms:play-services-location:16.0.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*'
                      , 'android/**/*.*', "io/realm/*.*"]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task javaDoc(type: Javadoc) {
    failOnError false
    def mainSrc = "$project.projectDir/src/main/java"
    source = files([mainSrc])
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javaDoc) {
    classifier = 'javadoc'
    from javaDoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

signing {
    sign(publishing.publications['mavenJava'])
}